Your ultimate mission is to architect and build "Maestro," a production-ready, full-stack multi-agent platform that brings the sophisticated concepts of the "AutoAgents: A Framework for Automatic Agent Generation" research paper to life through a polished and highly impressive web application. This project demands excellence across AI engineering, backend services, and frontend user experience, culminating in a system that is not only functional but also demonstrates a deep understanding of modern software and AI development paradigms. The core of Maestro's intelligence must be its dynamic agent generation capability, eschewing predefined roles for a system that crafts a bespoke team of specialized agents based on a user's initial task. This will be governed by a meticulous two-stage process: a Drafting Stage, where a Planner agent proposes an initial agent team and execution strategy, which is then iteratively refined through a collaborative critique by an Agent Observer (evaluating agent suitability) and a Plan Observer (assessing plan rationality); and an Execution Stage, where the finalized agent team collaborates to complete the task under the watch of an Observer agent that reflects on the process for future improvements. Every agent generated by the Planner must adhere to the structured format A = {P, D, T, S}, defining its Prompt, a concise Description, a specific Toolset (like web search or code execution), and high-level Suggestions for its operational approach. The entire platform will be built on a strict, modern tech stack: a Python backend powered by FastAPI for all API endpoints and WebSockets for streaming real-time updates, with Pydantic ensuring rigorous data validation. LLM integration is paramount, featuring a sophisticated, multi-layered strategy that interfaces with a local Ollama instance, while also offering cloud-based power through Groq (as the high-speed primary) and the Gemini API (as a robust secondary), complete with a smart fallback system (Groq -> Gemini -> Ollama) and allowing users to securely provide their own API keys. The frontend will be a Vite-built React application written in TypeScript, styled with the clean utility of Tailwind CSS. The user interface is a critical component and must be the epitome of "Production-Ready Modernization"â€”a clean, professional, responsive, and intuitive single-page application with a consistent, high-contrast white theme and a card-based design. This UI will be organized into a five-tab main interface: a "Create Task" tab with a simple chat interface that, upon submission, seamlessly transitions the user to the "Agent Network" tab. This second tab is the visual centerpiece, a dynamic Directed Acyclic Graph (DAG) on a clean grid, visualizing the agent team as professional cards displaying their role and real-time status (e.g., ðŸ¤– Pending, ðŸ•’ Working, âœ… Complete) with animated connection lines illustrating data flow and relationships, complete with zoom/pan controls. The third tab, the "Output Canvas," will present the final, aggregated result in a beautifully formatted, document-style layout reminiscent of Notion or Claude's canvas. The fourth, an "Activity Logs" tab, will provide a real-time, terminal-like stream of system events, color-coded and filterable by log level. Finally, the "Agent Inspector" tab will offer a deep dive into any selected agent, displaying its full P, D, T, S profile, a live feed of its thought process and API calls, confidence scores, and its current memory context. To elevate Maestro to an exceptional level, you will integrate several 'wow' factor features: comprehensive Human-in-the-Loop (HITL) controls allowing users to pause, inspect, modify, and approve agent actions directly from the DAG canvas; meticulous cost, token, and performance tracking displayed globally and on a per-agent basis; an interactive execution timeline with a "time travel" scrubber for unparalleled observability and debugging; agent memory and learning capabilities that allow users to save and reload successful agent configurations as templates for new tasks; and robust export options for both the final output (as Markdown/PDF) and the entire agent team's configuration (as a JSON file), making Maestro a truly powerful, practical, and visionary tool.